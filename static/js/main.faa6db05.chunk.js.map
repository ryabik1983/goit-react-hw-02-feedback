{"version":3,"sources":["components/Statistics/Statistics.js","components/Feedback/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","className","map","el","type","value","onClick","Notification","message","Section","title","state","handleIncrement","btnNames","Object","keys","App","feedback","setState","prevState","Math","round","isNaN","this","countTotalFeedback","countPositiveFeedbackPercentage","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAuBeA,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CACA,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,sDAAyBC,YCclBC,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,oBAAf,SACGF,EAAQG,KAAI,SAAAC,GAAE,OACb,wBAEEC,KAAK,SACLC,MAAOF,EACPG,QAAS,WACPN,EAAgBG,IALpB,SAQGA,GAPIA,SCIAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC6CEC,EA1CC,SAAC,GAMV,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAf,EAGI,EAHJA,MACAC,EAEI,EAFJA,mBACAe,EACI,EADJA,gBAEQnB,EAAuBkB,EAAvBlB,KAAMC,EAAiBiB,EAAjBjB,QAASC,EAAQgB,EAARhB,IACjBkB,EAAWC,OAAOC,KAAKJ,GAa7B,OACE,gCACE,6BAAKD,IACL,cAAC,EAAD,CAAiBV,gBAAiBY,EAAiBb,QAASc,IAC3DjB,EAAQ,EAdT,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAYpB,cAAC,EAAD,CAAcW,QAAS,6BC5BzBQ,E,4MACJL,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,gBAAkB,SAAAK,GAChB,IAAMZ,EAAQY,EACd,EAAKC,UAAU,SAAAC,GAAS,sBAAOd,EAAOc,EAAUd,GAAS,O,wDAG3D,YACF,OAD4C,EAArBZ,KAAqB,EAAfC,QAAe,EAANC,M,6CAGpC,YAAuD,IAArBF,EAAoB,EAApBA,KAC1BG,EAAQH,EADsC,EAAdC,QAAc,EAALC,IAEzCE,EAAqBuB,KAAKC,MAAc,IAAP5B,EAAcG,GACrD,OAAO0B,MAAMzB,GAAsB,KAAUA,EAAqB,M,oBAEpE,WACE,OACA,cAAC,EAAD,CACAa,MAAQ,wBACRE,gBAAmBW,KAAKX,gBACxBD,MAASY,KAAKZ,MACdf,MAAS2B,KAAKC,mBAAmBD,KAAKZ,OACtCd,mBAAsB0B,KAAKE,gCAAgCF,KAAKZ,a,GA3BlDe,IAAMC,WAkCTX,IC5BAY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.faa6db05.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <h3>Statistics</h3>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>PositivePercentage: {positivePercentage}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div className=\"Counter__controls\">\r\n      {options.map(el => (\r\n        <button\r\n          key={el}\r\n          type=\"button\"\r\n          value={el}\r\n          onClick={() => {\r\n            onLeaveFeedback(el);\r\n          }}\r\n        >\r\n          {el}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n// \"There is no feedback\"></Notification>\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Statistics from '../Statistics';\r\nimport FeedbackOptions from '../Feedback';\r\nimport Notification from '../Notification';\r\n\r\nconst Section = ({\r\n  title,\r\n  state,\r\n  total,\r\n  positivePercentage,\r\n  handleIncrement,\r\n}) => {\r\n  const { good, neutral, bad } = state;\r\n  const btnNames = Object.keys(state);\r\n  function renderStatistic() {\r\n    return (\r\n      <Statistics\r\n        good={good}\r\n        neutral={neutral}\r\n        bad={bad}\r\n        total={total}\r\n        positivePercentage={positivePercentage}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <FeedbackOptions onLeaveFeedback={handleIncrement} options={btnNames} />\r\n      {total > 0 ? (\r\n        renderStatistic()\r\n      ) : (\r\n        <Notification message={'There is no feedback'} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  state: PropTypes.object.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n  handleIncrement: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n// import ReactDOM from 'react-dom';\nimport Section from './components/Section';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  \n  handleIncrement = feedback => {\n    const value = feedback;\n    this.setState (prevState => ({[value]:prevState[value] + 1,\n    }));\n  };\n  countTotalFeedback ({good, neutral, bad}) {\nreturn good + neutral + bad;\n  }\n  countPositiveFeedbackPercentage ({good, neutral, bad}){\n    const total = good + neutral + bad;\n    const positivePercentage = Math.round((good * 100) / total);\n    return isNaN(positivePercentage) ? 0 + '%' : positivePercentage + '%';\n  }\n  render (){\n    return (\n    <Section\n    title = \"Please leave feedback\"\n    handleIncrement = {this.handleIncrement}\n    state = {this.state}\n    total = {this.countTotalFeedback(this.state)}\n    positivePercentage = {this.countPositiveFeedbackPercentage(this.state)}\n    />\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}